open import Algorithms.TotalOrder
module Algorithms.PriorityQueue.Bounded {๐ โ} (โจA,โคโฉ : TotalOrder ๐ โ) where
open TotalOrder โจA,โคโฉ renaming (Carrier to A)
open import Algorithms.Equality
open import Algorithms.Miscellaneous

infix 4 _โคโบ_
infix 4 _โฅโบ_

data Aโบ : Set ๐ where
  โ  : Aโบ
  _โบ : A โ Aโบ

data _โคโบ_ : Aโบ โ Aโบ โ Set โ where
  โ  : โ {xโบ}          โ xโบ  โคโบ โ
  _โบ : โ {x y} โ x โค y โ x โบ โคโบ y โบ

pattern โฬธ = _ โบ

_โฅโบ_ = flip _โคโบ_

reflexiveโบ : โ {xโบ} โ xโบ โคโบ xโบ
reflexiveโบ {โ} = โ
reflexiveโบ {โฬธ} = reflexive โบ

antisymโบ : โ {xโบ yโบ} โ xโบ โคโบ yโบ โ xโบ โฅโบ yโบ โ xโบ โก yโบ
antisymโบ โ โ = refl
antisymโบ (x<y โบ) (x>y โบ) = _โบ โจ$โฉ antisym x<y x>y

transโบ : โ {xโบ yโบ zโบ} โ xโบ โคโบ yโบ โ yโบ โคโบ zโบ โ xโบ โคโบ zโบ
transโบ โ โ = โ
transโบ โฬธ โ = โ
transโบ (x<y โบ) (y<z โบ) = (trans x<y y<z)โบ

totalโบ : โ xโบ yโบ โ xโบ โคโบ yโบ โ xโบ โฅโบ yโบ
totalโบ โ โ = injโ โ
totalโบ โ โฬธ = injโ โ
totalโบ โฬธ โ = injโ โ
totalโบ (x โบ) (y โบ) with total x y
... | injโ xโคy = injโ (xโคy โบ)
... | injโ xโฅy = injโ (xโฅy โบ)

โจAโบ,โคโบโฉ : TotalOrder ๐ โ
โจAโบ,โคโบโฉ = record
  { Carrier   = Aโบ
  ; _โค_       = _โคโบ_
  ; reflexive = reflexiveโบ
  ; antisym   = antisymโบ
  ; trans     = transโบ
  ; total     = totalโบ
  }

open TotalOrder โจAโบ,โคโบโฉ using () public renaming
  ( min   to minโบ
  ; โจ_,_โฉ to โจ_,_โฉโบ
  )
